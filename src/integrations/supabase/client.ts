
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Tables } from '@/types/supabase';

const SUPABASE_URL = "https://fdiojhklzxuqczxiinzx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZkaW9qaGtsenh1cWN6eGlpbnp4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3NTM3NDIsImV4cCI6MjA2MjMyOTc0Mn0.E-gaFIY8p9TeWyNfK697wDr19y49rWkUaMwFC3L5Lhc";
const SUPABASE_SERVICE_ROLE_KEY = ""; // Este Ã© um placeholder. Nunca exponha esta chave no front-end.

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create our base client with the types, including our custom types
export const supabase = createClient<Database & { public: { Tables: Tables } }>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Create an admin client (for server-side operations only, DO NOT USE on client-side)
// This client should NEVER be exported or used in client-side code
// It exists here for documentation purposes only
// const adminClient = createClient<Database & { public: { Tables: Tables } }>(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

// Setup storage bucket initialization
export const initializeStorage = async () => {
  try {
    // Check if storage bucket exists for payment proofs
    const { data: buckets } = await supabase.storage.listBuckets();
    const paymentProofsBucketName = 'payment-proofs';
    
    if (!buckets?.some(bucket => bucket.name === paymentProofsBucketName)) {
      await supabase.storage.createBucket(paymentProofsBucketName, {
        public: true
      });
      console.log('Created payment-proofs storage bucket');
    }
  } catch (error) {
    console.error('Error initializing storage:', error);
  }
};

// Helper function to check if user is admin
export const isUserAdmin = async (): Promise<boolean> => {
  try {
    const { data, error } = await supabase.rpc('is_admin');
    if (error) {
      console.error('Error checking admin status:', error);
      return false;
    }
    return !!data;
  } catch (error) {
    console.error('Error checking admin status:', error);
    return false;
  }
};
